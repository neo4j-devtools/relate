type AccountInfo {
    # "you"
    userId: String!
}

type ConnectionInfo {
    accessToken: String!
}

type Backup {
    time: String!
}

type DBMS {
    # Neo4j 4.X
    id: String!
    dbs: [DB]!
    # metrics et al.
}

type DB {
    id: String!
    name: String!
    graphs: [Graph]!
    connection: ConnectionInfo! # use in driver to send queries
    # $ relate db:list-backups [path|url] [--format=<format>|--ids]
    # db.listBackups(filter: Filter): Promise<Backup[]>
    listBackups(filters: Filter): [Backup]!
    # metrics et al.
}

type Graph {
    id: String!
    name: String!
}

input Filter { # TBD
    field: String!
    type: String
    value: [String]!
}

input Config {
    name: String
    defaultDBMS: String
    # and many more...
}

type Agent {
    id: String!
    account: AccountInfo!
    # $ relate dbms:list
    # agent.listDBMSs(filters?: Filter[]): Promise<DBMS[]>
    listDBMSs(filters: [Filter]): [DBMS]! # TBD
    # $ relate dbms:use <nameOrId>
    # agent.useDBMS(nameOrId: string): Promise<DBMS>
    useDBMS(nameOrId: String): DBMS! # default "default"
}

type Query {
    # $ relate agent:use <nameOrId>
    # relate.useAgent(nameOrId: string): Promise<Agent>
    useAgent(nameOrId: String): Agent! # default "local"
    # $ relate agent:list
    # relate.listAgents(filters?: Filter[]): Promise<Agent[]>
    listAgents(filters: [Filter]): [Agent]!
}

type Mutation {
    # $ relate agent:add <name> <configPathOrURLÂ´?>
    # relate.addAgent(nameOrId: string, config: Partial<Config>): Promise<Agent>
    addAgent(nameOrId: String!, config: Config): Agent!
    # $ relate agent:edit <nameOrId> <configPathOrURL?>
    # relate.updateAgent(nameOrId: string, config: Partial<Config>): Promise<Agent>
    updateAgent(nameOrId: String!, config: Config): Agent!
    # $ relate agent:remove <nameOrId>
    # relate.removeAgent(nameOrId: string): Promise<Agent>
    removeAgent(nameOrId: String!): Agent!

    # $ relate dbms:create <dbms> [--source=<versionPathOrURL>]
    # agent.createDBMS(name: string, source?: string): Promise<DBMS>
    createDBMS(agentId: String!, name: String!, source: String): DBMS!
    # $ relate dbms:start <dbms> [<dbms...>]
    # agent.startDBMSs(name: [string, ...string]): Promise<DBMS[]>
    startDBMSs(agentId: String!, name: [String!]!): [DBMS]!
    # $ relate dbms:stop <dbms> [<dbms...>]
    # agent.stopDBMSs(name: [string, ...string]): Promise<DBMS[]>
    stopDBMSs(agentId: String!, name: [String!]!): [DBMS]!
    # $ relate dbms:upgrade <dbms> [<dbms...>] [--source=<versionPathOrURL>]
    # agent.upgradeDBMSs(name: [string, ...string], source?: string): Promise<DBMS[]>
    upgradeDBMSs(agentId: String!, name: [String!]!, source: String): [DBMS]!
    # $ relate dbms:delete <dbms> [<dbms...>]
    # agent.deleteDBMSs(name: [string, ...string]): Promise<DBMS[]>
    deleteDBMSs(agentId: String!, name: [String!]!): [DBMS]!

    # $ relate db:create <db>
    # agent.createDB(name: string): Promise<DB>
    createDB(agentId: String!, name: String!): DB!
    # $ relate db:start <db> [<db...>]
    # agent.startDBs(name: [string, ...string]): Promise<DB[]>
    startDBs(agentId: String!, name: [String!]!): [DB]!
    # $ relate db:stop <db> [<db...>]
    # agent.stopDBs(name: [string, ...string]): Promise<DB[]>
    stopDBs(agentId: String!, name: [String!]!): [DB]!
    # $ relate db:truncate <db> [<db...>]
    # agent.truncateDBs(name: [string, ...string]): Promise<DB[]>
    truncateDBs(agentId: String!, name: [String!]!): [DB]!
    # $ relate db:clone <db> [<db...>]
    # agent.cloneDBs(name: [string, ...string]): Promise<DB[]>
    cloneDBs(agentId: String!, name: [String!]!): [DB]!
    # $ relate db:drop <db> [<db...>]
    # agent.dropDBs(name: [string, ...string]): Promise<DB[]>
    dropDBs(agentId: String!, name: [String!]!): [DB]!
    # $ relate db:backup <db> [<db...>] [--target=<pathOrURL>]
    # agent.backupDBs(name: [string, ...string], target?: string): Promise<Backup[]>
    backupDBs(agentId: String!, name: [String!]!, target: String): [Backup]!
    # $ relate db:restore <db> [<db...>] [--target=<pathOrURL>]
    # agent.restoreDBs(name: [string, ...string], sources: [string, ...string]): Promise<Backup[]>
    restoreDBs(agentId: String!, sources: [String]): [Backup]!
}

