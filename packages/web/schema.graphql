# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppData {
  name: String!
  version: String!
  type: String!
  path: String!
}

type AppLaunchData {
  environmentNameOrId: String!
  appName: String!
  dbms: Dbms!
  principal: String
  accessToken: String
}

type AppLaunchToken {
  token: String!
  path: String!
}

input AuthTokenInput {
  scheme: String!
  principal: String!
  credentials: String!
}

type Dbms {
  id: ID!
  name: String
  description: String
  connectionUri: String
}

type DbmsInfo {
  id: ID!
  name: String
  description: String
  connectionUri: String
  status: String!
  version: String
  edition: String
}

type DbmsVersion {
  edition: String!
  version: String!
  origin: String!
  dist: String!
}

type ExtensionData {
  type: String!
  name: String!
  version: String!
  dist: String!
  origin: String!
}

type ExtensionVersion {
  type: String!
  name: String!
  version: String!
  origin: String!
}

enum FILTER_COMPARATORS {
  EQUALS
  NOT_EQUALS
  CONTAINS
  NOT_CONTAINS
}

enum FILTER_CONNECTORS {
  AND
  OR
}

type Mutation {
  createAppLaunchToken(environmentNameOrId: String, appName: String!, dbmsId: String!, principal: String, accessToken: String): AppLaunchToken!
  installExtension(environmentNameOrId: String, version: String!, name: String!): AppData!
  uninstallExtension(environmentNameOrId: String, name: String!): [ExtensionData!]!
  installDbms(environmentNameOrId: String, name: String!, credentials: String!, version: String!): String!
  uninstallDbms(environmentNameOrId: String, name: String!): String!
  startDbmss(environmentNameOrId: String, dbmsIds: [String!]!): [String!]!
  stopDbmss(environmentNameOrId: String, dbmsIds: [String!]!): [String!]!
  createAccessToken(environmentNameOrId: String, dbmsId: String!, appName: String!, authToken: AuthTokenInput!): String!
  updateDbmsConfig(environmentNameOrId: String, dbmsId: String!, properties: [[String!]!]!): Boolean!
  initProject(environmentNameOrId: String, name: String!): Project!
  addProjectDbms(name: String!, environmentNameOrId: String, dbmsName: String!, dbmsId: String!, user: String, accessToken: String): ProjectDbms!
  removeProjectDbms(name: String!, environmentNameOrId: String, dbmsName: String!): ProjectDbms!
  addProjectFile(name: String!, environmentNameOrId: String, destination: String, fileUpload: Upload!): RelateFile!
  removeProjectFile(name: String!, environmentNameOrId: String, filePath: String!): RelateFile!
}

type Project {
  name: String
  dbmss(filters: [RelateSimpleFilter!]): [ProjectDbms!]!
  files(filters: [RelateSimpleFilter!]): [RelateFile!]!
}

type ProjectDbms {
  name: String!
  connectionUri: String!
  user: String
  accessToken: String
}

type Query {
  appLaunchData(environmentNameOrId: String, appName: String!, launchToken: String!): AppLaunchData!
  listApps(filters: [RelateSimpleFilter!], environmentNameOrId: String): [AppData!]!
  listExtensionVersions(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [ExtensionVersion!]!
  listInstalledExtensions(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [AppData!]!
  getDbms(environmentNameOrId: String, dbmsId: String!): Dbms!
  listDbmss(filters: [RelateSimpleFilter!], environmentNameOrId: String): [Dbms!]!
  infoDbmss(environmentNameOrId: String, dbmsIds: [String!]!): [DbmsInfo!]!
  listDbmsVersions(filters: [RelateSimpleFilter!], environmentNameOrId: String): [DbmsVersion!]!
  listProjects(filters: [RelateSimpleFilter!], environmentNameOrId: String): [Project!]!
  getProject(environmentNameOrId: String, name: String!): Project!
}

type RelateFile {
  name: String!
  directory: String!
  extension: String!
}

input RelateSimpleFilter {
  field: String!
  type: FILTER_COMPARATORS
  connector: FILTER_CONNECTORS
  value: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
