# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AppData {
  name: String!
  origin: String!
  path: String!
  type: String!
  version: String!
}

type AppLaunchData {
  accessToken: String
  appName: String!
  dbms: Dbms!
  environmentId: String!
  principal: String
  project: Project
}

type AppLaunchToken {
  path: String!
  token: String!
}

input AuthTokenInput {
  credentials: String!
  principal: String!
  scheme: String!
}

type Db {
  currentStatus: String!
  default: String!
  error: String!
  name: String!
  requestedStatus: String!
  role: String!
}

type Dbms {
  connectionUri: String
  description: String
  id: ID!
  name: String
  tags: [String!]!
}

type DbmsInfo {
  connectionUri: String
  description: String
  edition: String
  id: ID!
  name: String
  status: String!
  tags: [String!]!
  version: String
}

type DbmsVersion {
  dist: String!
  edition: String!
  origin: String!
  version: String!
}

type ExtensionData {
  name: String!
  origin: String!
  type: String!
  version: String!
}

type ExtensionVersion {
  name: String!
  origin: String!
  type: String!
  version: String!
}

enum FILTER_COMPARATORS {
  CONTAINS
  EQUALS
  NOT_CONTAINS
  NOT_EQUALS
}

enum FILTER_CONNECTORS {
  AND
  OR
}

type Mutation {
  addDbmsTags(dbmsId: String!, environmentNameOrId: String, tags: [String!]!): DbmsInfo!
  addProjectDbms(accessToken: String, dbmsId: String!, dbmsName: String!, environmentNameOrId: String, name: String!, user: String): ProjectDbms!
  addProjectFile(destination: String, environmentNameOrId: String, fileUpload: Upload!, name: String!): RelateFile!
  createAccessToken(appName: String!, authToken: AuthTokenInput!, dbmsId: String!, environmentNameOrId: String): String!
  createAppLaunchToken(accessToken: String, appName: String!, dbmsId: String!, environmentNameOrId: String, principal: String, projectId: String): AppLaunchToken!
  createDb(accessToken: String!, dbmsId: String!, dbName: String!, user: String!): String!
  dropDb(accessToken: String!, dbmsId: String!, dbName: String!, user: String!): String!
  initProject(environmentNameOrId: String, name: String!): Project!
  installDbms(credentials: String!, edition: NEO4J_EDITION, environmentNameOrId: String, limited: Boolean, name: String!, noCaching: Boolean, version: String!): DbmsInfo!
  installExtension(environmentNameOrId: String, name: String!, version: String!): AppData!
  removeDbmsTags(dbmsId: String!, environmentNameOrId: String, tags: [String!]!): DbmsInfo!
  removeProjectDbms(dbmsName: String!, environmentNameOrId: String, name: String!): ProjectDbms!
  removeProjectFile(environmentNameOrId: String, filePath: String!, name: String!): RelateFile!
  startDbmss(dbmsIds: [String!]!, environmentNameOrId: String): [String!]!
  stopDbmss(dbmsIds: [String!]!, environmentNameOrId: String): [String!]!
  uninstallDbms(environmentNameOrId: String, name: String!): DbmsInfo!
  uninstallExtension(environmentNameOrId: String, name: String!): [ExtensionData!]!
  updateDbmsConfig(dbmsId: String!, properties: [[String!]!]!): Boolean!
}

enum NEO4J_EDITION {
  COMMUNITY
  ENTERPRISE
}

type Project {
  dbmss(filters: [RelateSimpleFilter!]): [ProjectDbms!]!
  files(filters: [RelateSimpleFilter!]): [RelateFile!]!
  id: String!
  name: String!
}

type ProjectDbms {
  accessToken: String
  connectionUri: String!
  name: String!
  user: String
}

type Query {
  appLaunchData(appName: String!, launchToken: String!): AppLaunchData!
  getDbms(dbmsId: String!, environmentNameOrId: String): DbmsInfo!
  getProject(environmentNameOrId: String, name: String!): Project!
  infoDbmss(dbmsIds: [String!]!, environmentNameOrId: String): [DbmsInfo!]!
  listApps(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [AppData!]!
  listDbmss(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [Dbms!]!
  listDbmsVersions(environmentNameOrId: String, filters: [RelateSimpleFilter!], limited: Boolean): [DbmsVersion!]!
  listDbs(accessToken: String!, dbmsId: String!, user: String!): [Db!]!
  listExtensions(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [AppData!]!
  listExtensionVersions(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [ExtensionVersion!]!
  listProjects(environmentNameOrId: String, filters: [RelateSimpleFilter!]): [Project!]!
}

type RelateFile {
  directory: String!
  downloadToken: String!
  extension: String!
  name: String!
}

input RelateSimpleFilter {
  connector: FILTER_CONNECTORS
  field: String!
  type: FILTER_COMPARATORS
  value: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload
